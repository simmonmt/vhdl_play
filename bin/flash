#!/bin/bash
#
# Flashes a bin file to a Mojo v3 board.
#
# Defaults (which differ from underlying mojo.py):
#  - Flashes to RAM
#  - Does not verify
#  - Assumes /dev/ttyACM0

function usage {
    echo "Usage: ${PROGNAME} [-w] binfile" >&2
    exit 2
}

function die {
    echo "${PROGNAME}: $@" >&2
    exit 1
}

function doflash {
  # mojo.py will happily accept any type of file, including the .bit files ISE
  # generates by default. .bin files are the only ones that will successfully
  # flash.
  [[ "${FLASHFILE##*.}" == "bin" ]] || \
    die "Flash file ${FLASHFILE} doesn't end with .bin"

  ${MOJO} -r -n -v -d ${TTY} "${FLASHFILE}"
}

BINDIR=$(dirname "$0")
PROGNAME=$(basename "$0")

VENDIR=$(readlink -f ${BINDIR}/../vendor)
MOJO=${VENDIR}/mojo.py/mojo.py

TTY=/dev/ttyACM0

WATCH=0
while getopts ":w" opt; do
    case $opt in
	w)
	    WATCH=1
	    ;;
	\?)
	    usage
	    ;;
    esac
done
shift $(($OPTIND - 1))

[[ $# -eq 1 ]] || die "Missing path to file to flash"
FLASHFILE=$1

[[ -f $FLASHFILE ]] || die "Flash file ${FLASHFILE} not found"

[[ -c $TTY ]] || die "TTY ${TTY} not found"

if [[ $WATCH -eq 0 ]] ; then
    doflash
else
    # ISE does close_write twice during the build. I don't know what
    # delete_self is, but it's the last event sent (as seen by
    # inotifywait in monitor mode), and is only sent once per build on
    # this file.
    event=delete_self

    doflash
    while inotifywait -e ${event} ${FLASHFILE} ; do date; doflash; done
fi
